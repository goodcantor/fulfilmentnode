const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const input = require("input");
const config = require("./config");
const fs = require("fs");
const path = require("path");
const { NewMessage } = require("telegram/events");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logFile = fs.createWriteStream(path.join(__dirname, "bot.log"), { flags: "a" });
const log = (message) => {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}\n`;
    console.log(message);
    logFile.write(logMessage);
};

const stringSession = new StringSession(config.sessionString);

(async () => {
    try {
        const client = new TelegramClient(stringSession, config.apiId, config.apiHash, {
            connectionRetries: 5,
        });

        await client.start({
            phoneNumber: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
            password: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å: "),
            phoneCode: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
            onError: (err) => log(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${err}`),
        });

        log("üîµ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è...");
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ .env —Ñ–∞–π–ª
        if (!config.sessionString) {
            const sessionString = client.session.save();
            log("–í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ .env):");
            log(sessionString);
            
            const envContent = fs.readFileSync(".env", "utf8");
            const updatedContent = envContent.replace(
                /SESSION_STRING=.*/,
                `SESSION_STRING=${sessionString}`
            );
            fs.writeFileSync(".env", updatedContent);
        }

        client.addEventHandler(async (event) => {
            try {
                const message = event.message;
                if (!message || !message.text) return;

                const sender = await message.getSender();
                const chat = await message.getChat();
                const senderUsername = sender.username ? sender.username.toLowerCase() : "";
                const messageText = message.text;

                log(`üì© –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ —á–∞—Ç–µ ${chat.id}: ${messageText.slice(0, 50)}...`);

                // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (
                    senderUsername.endsWith("bot") ||
                    config.bannedUsernames.includes(senderUsername) ||
                    config.bannedWords.some((word) => messageText.toLowerCase().includes(word))
                ) {
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if (config.keywords.some((word) => messageText.toLowerCase().includes(word))) {
                    let senderName = sender.firstName || "–ù–µ—Ç –∏–º–µ–Ω–∏";
                    if (sender.lastName) senderName += ` ${sender.lastName}`;
                    const profileLink = sender.username
                        ? `@${sender.username}`
                        : `tg://openmessage?user_id=${sender.id}`;

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                    let chatLink, messageLink;
                    if (chat.username) {
                        chatLink = `https://t.me/${chat.username}`;
                        messageLink = `https://t.me/${chat.username}/${message.id}`;
                    } else {
                        const chatIdStr = String(chat.id).replace("-100", "");
                        chatLink = `https://t.me/c/${chatIdStr}`;
                        messageLink = `https://t.me/c/${chatIdStr}/${message.id}`;
                    }

                    const messageToSend =
                        `üîî **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n` +
                        `üë§ **–û—Ç:** ${senderName}\n` +
                        `üìå **–ü—Ä–æ—Ñ–∏–ª—å:** ${profileLink}\n` +
                        `üì© **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${messageLink}\n` +
                        `üí¨ **–ß–∞—Ç:** ${chatLink}\n\n` +
                        `‚úâÔ∏è **–¢–µ–∫—Å—Ç:**\n\${messageText}\`;

                    await client.sendMessage(config.channelId, { message: messageToSend });
                    log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${config.channelId}`);
                }
            } catch (e) {
                log(`‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e}`);
            }
        }, new NewMessage({}));

        await client.connect();
        log("üîµ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è...");
        
        // –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await client.disconnected;
    } catch (e) {
        log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e}`);
        process.exit(1);
    }
})();
